#!/usr/bin/env node

/**
 * Parse Angular Material Components and generate all outputs
 */

import { NgParser } from './dist/src/index.js';
import { writeFileSync, mkdirSync } from 'fs';
import { join } from 'path';

const projectPath = '/home/antoine/dev/components';
const outputDir = '/home/antoine/dev/components/output-components';

console.log('🚀 Parsing Angular Material Components...');
console.log(`   Source: ${projectPath}`);
console.log(`   Output: ${outputDir}\n`);

// Ensure output directory exists
mkdirSync(outputDir, { recursive: true });

const parser = new NgParser({ rootDir: projectPath });
const result = await parser.parse();

console.log(`✓ Parsed ${result.metadata.totalEntities} entities`);
console.log(`✓ Found ${result.metadata.totalRelationships} relationships\n`);

// 1. Generate all Markdown detail levels
console.log('📝 Generating Markdown outputs...\n');

const levels = ['overview', 'features', 'detailed', 'complete'];
for (const level of levels) {
  const output = result.toMarkdown(level);
  const filename = `angular-material.${level}.md`;
  const filepath = join(outputDir, filename);

  writeFileSync(filepath, output);

  const sizeKB = (output.length / 1024).toFixed(1);
  const estimatedTokens = Math.round(output.length * 0.25);

  console.log(`  ✓ ${filename}`);
  console.log(`    Size: ${sizeKB} KB (~${estimatedTokens.toLocaleString()} tokens)`);
  console.log();
}

// 2. Generate JSON outputs
console.log('📊 Generating JSON outputs...\n');

// Full JSON
const fullJson = result.toJSON();
const fullJsonPath = join(outputDir, 'angular-material.full.json');
writeFileSync(fullJsonPath, JSON.stringify(fullJson, null, 2));
console.log(`  ✓ angular-material.full.json`);
console.log(`    Size: ${(JSON.stringify(fullJson).length / 1024).toFixed(1)} KB`);
console.log(`    Entities: ${fullJson.entities.length}`);
console.log();

// Simple JSON
const simpleJson = result.toSimpleJSON();
const simpleJsonPath = join(outputDir, 'angular-material.simple.json');
writeFileSync(simpleJsonPath, JSON.stringify(simpleJson, null, 2));
console.log(`  ✓ angular-material.simple.json`);
console.log(`    Size: ${(JSON.stringify(simpleJson).length / 1024).toFixed(1)} KB`);
console.log();

// GraphRAG JSON
const graphRag = result.toGraphRAG();
const graphRagPath = join(outputDir, 'angular-material.graphrag.json');
writeFileSync(graphRagPath, JSON.stringify(graphRag, null, 2));
console.log(`  ✓ angular-material.graphrag.json`);
console.log(`    Size: ${(JSON.stringify(graphRag).length / 1024).toFixed(1)} KB`);
console.log();

// 3. Generate HTML
console.log('🌐 Generating HTML output...\n');

const html = result.toHTML();
const htmlPath = join(outputDir, 'angular-material.html');
writeFileSync(htmlPath, html);
console.log(`  ✓ angular-material.html`);
console.log(`    Size: ${(html.length / 1024).toFixed(1)} KB`);
console.log();

// 4. Generate semantic chunks
console.log('📦 Generating semantic chunks...\n');

const chunksDir = join(outputDir, 'chunks');
mkdirSync(chunksDir, { recursive: true });

const { chunks, manifest } = await result.toMarkdownChunked('detailed');

console.log(`  ✓ Created ${chunks.length} semantic chunks\n`);

// Save manifest
const manifestPath = join(chunksDir, 'manifest.json');
writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
console.log(`  📋 chunks/manifest.json`);
console.log(`     Project: ${manifest.projectName}`);
console.log(`     Total entities: ${manifest.totalEntities}`);
console.log(`     Total chunks: ${manifest.totalChunks}`);
console.log();

// Save each chunk
let totalChunkSize = 0;
chunks.forEach((chunk, index) => {
  const filename = `${chunk.metadata.chunkId}.md`;
  const filepath = join(chunksDir, filename);

  writeFileSync(filepath, chunk.content);
  totalChunkSize += chunk.content.length;

  const sizeKB = (chunk.content.length / 1024).toFixed(1);

  console.log(`  ✓ chunks/${filename}`);
  console.log(`     Feature: ${chunk.metadata.feature}`);
  console.log(`     Entities: ${chunk.metadata.entities.length}`);
  console.log(`     Size: ${sizeKB} KB (~${chunk.metadata.tokenCount.toLocaleString()} tokens)`);
  if (chunk.metadata.relatedChunks.length > 0) {
    console.log(`     Related: ${chunk.metadata.relatedChunks.join(', ')}`);
  }
  console.log();
});

// 5. Generate README
console.log('📄 Generating README...\n');

const readmeContent = `# Angular Material Components - Parse Output

Generated: ${new Date().toISOString()}

## Project Information

- **Total Entities**: ${result.metadata.totalEntities}
- **Total Relationships**: ${result.metadata.totalRelationships}
- **Angular Version**: ${result.metadata.angularVersion || 'Unknown'}
- **Generated by**: ng-parser v1.5.0

## Output Files

### Markdown - Detail Levels (Optimized for LLM)

| File | Size | Tokens | Description |
|------|------|--------|-------------|
| \`angular-material.overview.md\` | ${(levels.map(l => result.toMarkdown(l))[0].length / 1024).toFixed(1)} KB | ~${Math.round(levels.map(l => result.toMarkdown(l))[0].length * 0.25).toLocaleString()} | Ultra-compact summary |
| \`angular-material.features.md\` | ${(levels.map(l => result.toMarkdown(l))[1].length / 1024).toFixed(1)} KB | ~${Math.round(levels.map(l => result.toMarkdown(l))[1].length * 0.25).toLocaleString()} | Grouped by features |
| \`angular-material.detailed.md\` | ${(levels.map(l => result.toMarkdown(l))[2].length / 1024).toFixed(1)} KB | ~${Math.round(levels.map(l => result.toMarkdown(l))[2].length * 0.25).toLocaleString()} | Full details + context |
| \`angular-material.complete.md\` | ${(levels.map(l => result.toMarkdown(l))[3].length / 1024).toFixed(1)} KB | ~${Math.round(levels.map(l => result.toMarkdown(l))[3].length * 0.25).toLocaleString()} | Complete export |

### JSON Formats

- \`angular-material.full.json\` - Complete structured export (${(JSON.stringify(fullJson).length / 1024).toFixed(1)} KB)
- \`angular-material.simple.json\` - Simplified format (${(JSON.stringify(simpleJson).length / 1024).toFixed(1)} KB)
- \`angular-material.graphrag.json\` - GraphRAG format (${(JSON.stringify(graphRag).length / 1024).toFixed(1)} KB)

### Visualization

- \`angular-material.html\` - Interactive D3.js visualization (${(html.length / 1024).toFixed(1)} KB)

### Semantic Chunks

Directory: \`chunks/\`

- \`manifest.json\` - Index of all chunks
- \`chunk-*.md\` - ${chunks.length} semantic chunks (~${(totalChunkSize / chunks.length / 1024).toFixed(1)} KB each)

## Usage with LLM

### Quick Start

\`\`\`bash
# For quick overview
cat angular-material.overview.md

# For detailed analysis (recommended)
cat angular-material.detailed.md

# For large projects, use chunks
cat chunks/manifest.json
cat chunks/chunk-000.md
\`\`\`

### Token Limits

| LLM | Max Context | Recommended File |
|-----|-------------|------------------|
| Claude 3.5 Sonnet | 200K tokens | detailed or complete |
| GPT-4 Turbo | 128K tokens | detailed |
| GPT-4o | 128K tokens | detailed |

### Features

The parser has detected the following features:

${Array.from(new Set(chunks.flatMap(c => c.metadata.feature.split(', ')))).map(f => `- ${f}`).join('\n')}

## Statistics

- **Total output files**: ${4 + 3 + 1 + chunks.length + 1}
- **Total size**: ${((levels.reduce((sum, l) => sum + result.toMarkdown(l).length, 0) + JSON.stringify(fullJson).length + JSON.stringify(simpleJson).length + JSON.stringify(graphRag).length + html.length + totalChunkSize) / 1024 / 1024).toFixed(2)} MB
- **Chunks generated**: ${chunks.length}
- **Average chunk size**: ${(totalChunkSize / chunks.length / 1024).toFixed(1)} KB

## Regenerate

To regenerate these files:

\`\`\`bash
cd /home/antoine/dev/ng-parser
node parse-components.js
\`\`\`

## Documentation

For more information, see:
- Guide d'utilisation: \`/home/antoine/dev/ng-parser/docs/LLM_OPTIMIZATION_USAGE.md\`
- Rapport de vérification: \`/home/antoine/dev/ng-parser/docs/VERIFICATION_REPORT.md\`
`;

const readmePath = join(outputDir, 'README.md');
writeFileSync(readmePath, readmeContent);
console.log(`  ✓ README.md\n`);

// 6. Summary
console.log('📊 Summary\n');
console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');

const totalFiles = 4 + 3 + 1 + chunks.length + 2; // md + json + html + chunks + manifest + readme
const totalSize =
  levels.reduce((sum, level) => sum + result.toMarkdown(level).length, 0) +
  JSON.stringify(fullJson).length +
  JSON.stringify(simpleJson).length +
  JSON.stringify(graphRag).length +
  html.length +
  totalChunkSize;

console.log(`  Total files generated: ${totalFiles}`);
console.log(`  Total size: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);
console.log(`  Output directory: ${outputDir}`);
console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
console.log();
console.log('✨ Done! All outputs generated successfully.');
console.log();
console.log('📂 Files are available in:');
console.log(`   ${outputDir}/`);
console.log();
console.log('🚀 Quick commands:');
console.log(`   cat ${outputDir}/angular-material.overview.md`);
console.log(`   cat ${outputDir}/angular-material.detailed.md`);
console.log(`   cat ${outputDir}/chunks/manifest.json`);
console.log(`   open ${outputDir}/angular-material.html`);
